# -*- coding: utf-8 -*-
"""
Created on Thu Jan  4 14:55:39 2018

@author: mark
"""

#Clear variables
from IPython import get_ipython
get_ipython().magic('reset -sf')
#Import everything

import matplotlib.pyplot as plt
from scipy.special import erf as erf
from scipy.fftpack import fft, ifft, fftshift, dct
import numpy as np
##################################
#Functions. h(x) is a smooth transition from f(x) to g(x)
alpha = 0.05

def g(x,alpha):
    g=np.exp(-gamma*x)
    return(g)
    
def theta(x, theta):
    return (1)

def s2(x,a,b,alpha=alpha):
    s2=(0.5 + 0.5 * (erf(((x)-a)/b)))
    return(s2)
        
def theta(x,a,b):
    theta=((x-a)/b)
    return (0.5 + 0.5 *np.tanh(theta))

def h(x,s,f):
    h=s*g(x,alpha)
    return(h)
##################################   
#Constants   
#a shifts when the transition occours, b controlls the smothness
alpha = 0.05
a=5
b=1
gamma=1
#################################    
x=np.linspace(0.01,10,1024)

elr=theta(h(x,s2(x,a,b),g(x,alpha)), a, b)
#elr2=h(x,s2(x,a,b),f(x), g(x,alpha))
#elr=elr/max(elr)

plt.plot(x,elr)
#plt.plot(x,elr2)
plt.legend(['tanh smoothing', 'erf smoothing'])

fftelr=np.fft.fftshift(np.fft.fft(elr))
#fftelr2=np.fft.fft(elr2)
#fftelr=fftshift(fftelr)
#fftelr2=fftshift(fftelr2)
f=np.fft.fftfreq(len(elr), x[0] - x[-1])
plt.figure(2)
#plt.plot(np.abs(fftelr))
#plt.plot(np.abs(fftelr2))
plt.plot(f,np.abs(fftelr)*f**2)
#plt.plot(f,np.abs(fftelr2)/len(fftelr))
#plt.plot(imelr)
plt.legend(['F(Elr1)'])

